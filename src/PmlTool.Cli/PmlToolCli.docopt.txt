{0}, the PML processor v{1}

Tools for baking and querying symbols from a Process Monitor Log (PML) file.

Usage:
  {0} bake [--debug] [--no-ntsymbolpath] [--no-symbol-download] PML
  {0} resolve PML
  {0} query PML QUERY...
  {0} convert [--mergethreads STRATEGY] PML [CONVERTED]
  {0} (help|-h|--help)
  {0} (-v|--version)

Commands:
  bake       Bake symbols from PML into <PML>.pmlbaked

  resolve    Try to resolve symbols for every module found in PML. If your
             _NT_SYMBOL_PATH is set to download symbols, this will preload
             PDB's for the PML into your local symbol store.

             Example _NT_SYMBOL_PATH:
                 srv*C:\Symbols*https://msdl.microsoft.com/download/symbols

             Note that the symbol server is fairly slow to download and many
             of the PDB's caught up in a broad capture session can be very
             large.

  convert    Render file IO events from the PML to a chrome://tracing file.
             Drag the resulting .json file onto Chrome or Edge to visualize and
             browse. Converted file will be overwritten if it already exists.

  query      Run basic queries against the given PML file. If there is a .pmlbaked
             file (generated with `bake`) then stacks will be symbolicated.

  help       Show this screen.

Arguments:
  PML        Path to the PML (Process Monitor Log) file to process. An extension
             of `.pml` will be added if missing. The folder containing this file
             will also be used for:

             * Finding mono pmip jit log files (copy them here before Unity exits)
             * Writing a .pmlbaked file with the same filename as PML with the
               symbolicated data, to be used for a `query`.

  QUERY      {{int,datetime}} Print the stack for the matching event.
             {{regex}}        Print ID's for events that match symbol or module name.

  CONVERTED  Optional filename for converted PML. If not specified, the
             converted PML will be written to <PML>.json.

  STRATEGY   Strategy for merging threads, case insensitive. One of:

             none  Do not merge threads (same as no --merge-threads)
             all   Merge all threads into a single thread called `(merged)`
             min   Merge threads down to the minimum required to do the IO in parallel

Options:
  --debug               Write PMLBAKED in a more readable text debug format. (3-4x bigger)
  --no-ntsymbolpath     Don't use _NT_SYMBOL_PATH
  --no-symbol-download  Strip any http* from _NT_SYMBOL_PATH to avoid slow downloads
  --mergethreads        Pretend that all processes are single-threaded.
  -h --help             Show this screen.
  -v --version          Show version.x

IMPORTANT: baking should be done before any DLL's are replaced, such as from a
Windows Update or rebuilding Unity. No validation is done to ensure that DLL's
matching a given path are the exact same as what was recorded into a PML.
