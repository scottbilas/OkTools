{0}, the PML processor v{1}

Tools for baking and querying symbols from a Process Monitor Log (PML) file.

Usage:
  {0} bake [--debug] [--no-ntsymbolpath] [--no-symbol-download] PML
  {0} resolve PML
  {0} query PMLBAKED QUERY...
  {0} (-h|--help)
  {0} (-v|--version)

  bake      Bake symbols from PML into <PML>.pmlbaked

  resolve   Try to resolve symbols for every module found in PML. If your
            {k_NtSymbolPath} is set to download symbols, this will preload
            PDB's for the PML into your local symbol store.

            Example _NT_SYMBOL_PATH:
                srv*C:\Symbols*https://msdl.microsoft.com/download/symbols

            Note that the symbol server is fairly slow to download and many
            of the PDB's caught up in a broad capture session can be very
            large.

  query     Run basic queries against the given PMLBAKED file.

  PML       Path to the PML (Process Monitor Log) file to process. The folder
            containing this file will also be used for:

            * Finding mono pmip jit log files (copy them here before Unity exits)
            * Writing a .pmlbaked file with the same filename as PML with the
              symbolicated data, to be used for a `query`.

  PMLBAKED  Path to a .pmlbaked file (file extension optional) for running queries.

  QUERY     {{int,datetime}} Print the stack for the matching event.
            {{regex}}        Print ID's for events that match symbol or module name.

Options:
  --debug               Write PMLBAKED in a more readable text debug format. (3-4x bigger)
  --no-ntsymbolpath     Don't use _NT_SYMBOL_PATH
  --no-symbol-download  Strip any http* from _NT_SYMBOL_PATH to avoid slow downloads
  -h --help             Show this screen.
  -v --version          Show version.x

IMPORTANT: baking should be done before any DLL's are replaced, such as from a
Windows Update or rebuilding Unity. No validation is done to ensure that DLL's
matching a given path are the exact same as what was recorded into a PML.
